def generate_security_recommendations(service, openai_endpoint, openai_api_key, openai_api_version, deployment, search_endpoint, search_key, search_index):        
    client = openai.AzureOpenAI(      
        azure_endpoint=openai_endpoint,      
        api_key=openai_api_key,      
        api_version=openai_api_version,      
    )  
    
    # We'll generate a prompt for each service    
    prompt = f" what are the security threats and mitigations for the following azure services: {service}"  
    # Generate the completion with Azure Search data source  
    completions_response = client.chat.completions.create(      
        model=deployment,      
        messages=[  
            {  
                "role": "system",  
                "content": "You are an Azure security engineer, You are analyzing the threat landscape for this service each service and providing questions to the user around the SDL"  
            },    
            {      
                "role": "user",      
                "content": prompt,      
            },      
        ],  
        extra_body={  
                "data_sources": [  
                    {  
                        "type": "azure_search",  
                        "parameters": {  
                            "endpoint": search_endpoint,  
                            "index_name": search_index,  
                            "authentication": {  
                            "type": "api_key",  
                            "key": search_key  
                        }  
                        }  
                    }  
                ],
                "max_tokens": 100,  #The maximum number of tokens to generate (default is 2048).
                "temperature": 0.5, #Controls the "creativity" of the generated text. Higher values result in more diverse output (default is 1).
                "top_p": 1.0, #Controls the probability of selecting the next token based on its score (default is 1).
                "frequency_penalty": 0.0, #Controls the penalty applied to tokens based on their frequency in the training data (default is 0).
                "presence_penalty": 0.0, #Controls the penalty applied to tokens that are already present in the text (default is 0).
            }  
        )  
  
    completion = completions_response.choices[0].message.content    
  
    if "The requested information is not available in the retrieved data" in completion:  
        print("The requested information is not available in the retrieved data for the service  " + service)
        # Generate the completion without Azure Search data source  
        completions_response = client.chat.completions.create(      
            model=deployment,      
            messages=[
                {  
                "role": "system",  
                "content": "You are an Azure security engineer, You are analyzing the threat landscape for this service each service and are providing actionable threats and mitigations for each service provided."  
                },        
                {
                    "role": "user",      
                    "content": f"what are the security threats and mitigations for the following azure services:  {service}?",      
                },      
            ],
            extra_body={ 

            } 
        )  
  
      #  completion = completions_response.choices[0].message.content    
  
    print(f"Chatbot: {completion}")        
    
    return completion   